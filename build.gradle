plugins {
	id 'java'
	id "io.github.liplum.mgpp" version "1.1.4"
}


tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.reflect=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.vm.annotation=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.access=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.loader=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.platform=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.module=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED")
//	options.compilerArgs.addAll("-classpath", "libs/libs.jar")

//	options.compilerArgs.addAll("--add-opens", "java.base/jdk.internal.reflect=ALL-UNNAMED")
}

group 'org.example'
version '1.0'
sourceSets.main.java.srcDirs = ["src"]
targetCompatibility = 11
sourceCompatibility = 11
repositories {
	mavenCentral()
	mindustryRepo()
}


def MdtDataDir = "E:/Users/ASUS/Desktop/Mindustry136"
def VERSION = "1.2.4"
def uncVersion = "1.8.1"
dependencies {
	annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"
	implementation 'com.jakewharton.android.repackaged:dalvik-dx:11.0.0_r3'
//	classpath 'com.android.tools.build:gradle:7.2.1'
	compileOnly files("F:/files/mindustry/a/mdt-ac-1.0.jar")
	compileOnly files(
			MdtDataDir + "/Mindustry_android.jar",
			"F:/files/java/sdk/platforms/android-28/android.jar",
			"libs/mod-tools.jar",
			"libs/libs.jar",
			"E:/Users/ASUS/Desktop/Mods/Android_dalvik-1.0.jar",
	)
	implementation files(
			"E:/Users/ASUS/Desktop/Mods/localLib/ClassDefiner/unsafe/ClassDefiner-1.0.jar",
			"E:/Users/ASUS/Desktop/Mods/TmpMods/AndroidField/AndroidField.jar",
	)

	def mindustryVersion = 'v144.1'
//	implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
//	implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
	compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
	compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
}

mindustry {
	meta.version = VERSION
	meta.name = meta.displayName = "better_js"
	def name = project.archivesBaseName
	jar {
		from("$buildDir/libs") {
			include "AndroidLib.jar"
		}
	}
	deploy {
		baseName = name
	}
	dexJar {
		options.minApi = '31'
	}
}

import arc.files.Fi

task playGame(dependsOn: classes, type: JavaExec) {
	dependsOn jar
	doFirst {
		def modFi = project.archivesBaseName + "-1.0.jar"
		new Fi("" + buildDir).child("libs").child(modFi).copyTo(new Fi(MdtDataDir).child("mods")
//				.child("test")
				.child(project.archivesBaseName + "-1.2.4.jar"))
	}
	//运行游戏目录
	def gameFile = new File(MdtDataDir + "/Mindustry.jar")
	main = "-jar"
	args = [
			gameFile.path
//			,"-debug"
	]
}

task dexAdapter {
	dependsOn jar

	doLast {
		def sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_HOME")

		def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

		//collect dependencies needed for desugaring
		def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")] + [new File("$buildDir/libs", "BetterJS-1.0.jar")]).collect { "--classpath $it.path" }.join(" ")

		def d8 = new File("$sdkRoot/build-tools/").listFiles().find {
			it.listFiles().any { it.name.contains("d8") }
		}.listFiles().find { it.name.contains("d8") }
		"$d8 $dependencies --min-api 14 --output AndroidLib.jar $buildDir/classes/java/main/better_js/myrhino/MyJavaAdapter.class"
				.execute(null, new File("$rootDir/assets")).waitForProcessOutput(System.out, System.err)
	}
}
task ZComplieAll(type: Jar)  {
	dependsOn dexAdapter
	dependsOn deploy
}
task playAndroid {
	dependsOn ZComplieAll
	def adb = "F:/files/java/sdk/platform-tools/adb";
	doFirst {
		"$adb shell am force-stop io.anuke.mindustry"
				.execute().waitForProcessOutput(System.out, System.err)
	}
	def MDT_ANDROID_DIR = "/sdcard/Android/data/io.anuke.mindustry/files";
	doLast {
		("$adb push ${buildDir}/tmp/deploy/${project.archivesBaseName}-${VERSION}.jar"
				+ " $MDT_ANDROID_DIR/mods/")
				.execute().waitForProcessOutput(System.out, System.err)

		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -D -W "
				.execute().waitForProcessOutput(System.out, System.err)

		"$adb push ${project.rootDir}/appendLog.sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -D -W "
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
	}
}
mindustryAssets {
	// Set the assets root
	rootAt "$projectDir/assets"
}

test {
	useJUnitPlatform()
}


tasks.withType(JavaCompile) {
	options.fork = true
	options.forkOptions.jvmArgs.addAll([
			"--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
	])
}
