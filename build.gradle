plugins {
	id 'java'
	id "io.github.liplum.mgpp" version "1.1.4"
}


tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.reflect=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.vm.annotation=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.access=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.loader=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.platform=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.module=ALL-UNNAMED")
	options.compilerArgs.addAll("--add-exports", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED")
//	options.compilerArgs.addAll("-classpath", "libs/libs.jar")

//	options.compilerArgs.addAll("--add-opens", "java.base/jdk.internal.reflect=ALL-UNNAMED")
}

group 'org.example'
version '1.0'
sourceSets {
	main {
		java.srcDirs = ["src"]
	}
}
targetCompatibility = 11
sourceCompatibility = 11
repositories {
	mavenCentral()
	mindustryRepo()
}


def MdtDataDir = "E:/Users/ASUS/Desktop/Mindustry136"
def VERSION = "1.2.4"
def uncVersion = "1.8.1"
dependencies {
	annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"
	implementation 'com.jakewharton.android.repackaged:dalvik-dx:11.0.0_r3'
//	classpath 'com.android.tools.build:gradle:7.2.1'
//	implementation 'com.github.eclipsesource:J2V8:00dddaa31a'
	compileOnly files("F:/files/mindustry/a/mdt-ac-1.0.jar")
	compileOnly files(
			MdtDataDir + "/Mindustry_android.jar",
//			"E:/Program Files/AndroidStudio/sdk/platforms/android-32/android.jar",
			"F:/files/java/sdk/platforms/android-28/android.jar",
			"libs/mod-tools.jar",
			"libs/libs.jar",
			"E:/Users/ASUS/Desktop/Mods/Android_dalvik-1.0.jar",
	)
	implementation files(
//			"libs/asm-5.1.jar",
//			"libs/ReflectionFX-1.9.4.jar",
			"E:/Users/ASUS/Desktop/Mods/mod-tools136/ClassDefiner/unsafe/ClassDefiner-1.0.jar",
			"E:/Users/ASUS/Desktop/Mods/TmpMods/AndroidField/AndroidField.jar",
	)
//	implementation files("libs/reflectasm.jar")

	def mindustryVersion = 'v144.1'
//	implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
//	implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
	compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
	compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
//	compileOnly files("assets/invokeFunc.jar")
}

mindustry {
	dependency {
//        mindustry version: '22810'
		// To use jitpack, https://jitpack.io/#anuken/mindustryjitpack
		mindustry version: 'v143'
		arc version: 'v143'
	}
	client {
//		official version: 'v138'
//		fromLocal MdtDataDir + "/Mindustry.jar"
//		args += ['-debug']
	}
	meta << ModMeta(
			version: VERSION
	)
	meta.displayName = "better_js"
	def name = project.archivesBaseName
	deploy {
		baseName = name
	}
	dexJar {
		options.minApi = '26'
	}

	run {
//		if (true) throw new RuntimeException()
		keepOtherMods
//		setDataDefault()
		dataDir = MdtDataDir
	}
}

import arc.files.Fi;

task playGame(dependsOn: classes, type: JavaExec) {
	dependsOn jar
	doFirst {
		def modFi = project.archivesBaseName + "-1.0.jar"
//		def modFi = project.archivesBaseName + "-1.2.3.jar"
		new Fi("" + buildDir).child("libs").child(modFi).copyTo(new Fi(MdtDataDir).child("mods")
//				.child("test")
				.child(project.archivesBaseName + "-1.2.4.jar"))
	}
	//运行游戏目录
	def gameFile = new File(MdtDataDir + "/Mindustry.jar")
	main = "-jar"
	args = [
			gameFile.path
//			,"-debug"
	]
}

task ZComplieAll {
	dependsOn deploy
}
task playAndroid {
	new Fi("${buildDir}/tmp/exit").mkdirs();
	dependsOn deploy
//    System.out.println("${project.archivesBaseName}-${VERSION}.jar");
//    throw  new RuntimeException()
	def MDT_ANDROID_DIR  = "/sdcard/Android/data/io.anuke.mindustry/files";
	String adb = "F:/files/java/sdk/platform-tools/adb"
	doLast {
		"$adb push ${buildDir}/tmp/deploy/${project.archivesBaseName}-${VERSION}.jar ${MDT_ANDROID_DIR}/mods/"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell am force-stop io.anuke.mindustry"
				.execute().waitForProcessOutput(System.out, System.err)

//		new Fi("${buildDir}/tmp/exit").deleteDirectory()
		/*"$adb shell tail ${MDT_ANDROID_DIR}/last_log.txt"
				.execute().waitForProcessOutput(System.out, System.err)*/
		/*String MindustryLogPath = "${MDT_ANDROID_DIR}/last_log.txt"
		new Fi("${project.rootDir}//appendLog.sh")
		.writeString("""
#!/bin/sh
# MADE By BING
# 获取文件的初始修改时间
old_time=-1
# 循环检查文件的修改时间
while true; do
  # 获取文件的当前修改时间
  new_time=/$(stat -c %y ${MindustryLogPath})
  # 如果修改时间发生变化
  if [ "/$new_time" != "/$old_time" ]; then
    # 将文件的内容追加到控制台
    tail -f ${MindustryLogPath}
    # 更新修改时间
    old_time=/$new_time
  fi
  # 等待一段时间（秒）
  sleep 0.02
done""")
		"$adb push ${project.rootDir}//appendLog.sh ${MDT_ANDROID_DIR}/appendLog.sh".execute()
			.waitForProcessOutput(System.out, System.err)*/
		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -D -W "
				.execute().waitForProcessOutput(System.out, System.err)
		/*"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
						.execute().waitForProcessOutput(System.out, System.err)*/

		/*while (true) {
			"$adb pull ${MDT_ANDROID_DIR}/last_log.txt ${buildDir}/tmp/".execute()
			.waitForProcessOutput(System.out, System.err)
			Thread.sleep(100);
//			if (new Fi("${buildDir}/tmp/exit").exists()) break;
		}*/
	}
}
mindustryAssets {
	// Set the assets root
	rootAt "$projectDir/assets"
}

test {
	useJUnitPlatform()
}





tasks.withType(JavaCompile) {
	options.fork = true
	options.forkOptions.jvmArgs.addAll([
			"--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
			"--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
	])
}
